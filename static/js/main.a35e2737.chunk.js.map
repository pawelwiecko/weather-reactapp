{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","onSubmit","submit","type","value","placeholder","onChange","change","Result","_props$weather","weather","city","date","temp","sunset","sunrise","pressure","err","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","className","Math","floor","concat","APIKey","App","state","handleInputChange","e","_this","setState","target","handleCitySubmit","preventDefault","API","fetch","then","response","ok","Error","json","data","time","toLocaleString","main","sys","catch","prevState","components_Form","this","components_Result","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAYeA,SATD,SAAAC,GACV,OACIC,EAAAC,EAAAC,cAAA,QAAMC,SAAUJ,EAAMK,QAClBJ,EAAAC,EAAAC,cAAA,SAAOG,KAAK,OAAOC,MAAOP,EAAMO,MAAOC,YAAY,eAAeC,SAAUT,EAAMU,SAClFT,EAAAC,EAAAC,cAAA,2BC0BIQ,EA/BA,SAAAX,GAAS,IAAAY,EACqCZ,EAAMa,QAAzDC,EADcF,EACdE,KAAMC,EADQH,EACRG,KAAKC,EADGJ,EACHI,KAAMC,EADHL,EACGK,OAAQC,EADXN,EACWM,QAASC,EADpBP,EACoBO,SAAUC,EAD9BR,EAC8BQ,IAE/CC,EAAU,KAEd,IAAID,GAAON,EAAM,CAGb,IAAMQ,EAAc,IAAIC,KAAe,IAAVL,GAAgBM,qBACvCC,EAAa,IAAIF,KAAc,IAATN,GAAeO,qBAG3CH,EACApB,EAAAC,EAAAC,cAAA,OAAKuB,UAAU,WACfzB,EAAAC,EAAAC,cAAA,qCAA4BF,EAAAC,EAAAC,cAAA,UAAKW,IACjCb,EAAAC,EAAAC,cAAA,iCAAyBY,GACzBd,EAAAC,EAAAC,cAAA,mCAA2BwB,KAAKC,MAAMZ,GAAtC,UACAf,EAAAC,EAAAC,cAAA,iDAA4BmB,GAC5BrB,EAAAC,EAAAC,cAAA,kDAA6BsB,GAC7BxB,EAAAC,EAAAC,cAAA,oCAAuBgB,EAAvB,SAKJ,OACIlB,EAAAC,EAAAC,cAAA,OAAKuB,UAAU,UACZN,EAAG,kBAAAS,OAAqBf,GAASO,ICvBtCS,EAAS,mCAmEAC,6MA/DbC,MAAQ,CACNzB,MAAO,GACPO,KAAK,GACLC,KAAM,GACNC,KAAK,GACLC,OAAO,GACPC,QAAS,GACTC,SAAS,GACTC,IAAI,MAGNa,kBAAoB,SAAAC,GAClBC,EAAKC,SAAS,CACZ7B,MAAO2B,EAAEG,OAAO9B,WAIpB+B,iBAAmB,SAAAJ,GACjBA,EAAEK,iBACF,IAAMC,EAAG,qDAAAX,OAAwDM,EAAKH,MAAMzB,MAAnE,WAAAsB,OAAkFC,EAAlF,iBAETW,MAAMD,GACLE,KAAK,SAAAC,GACJ,GAAGA,EAASC,GACV,OAAOD,EAET,MAAME,MAAM,6BAEbH,KAAK,SAAAC,GAAQ,OAAIA,EAASG,SAC1BJ,KAAK,SAAAK,GACJ,IAAMC,GAAO,IAAIzB,MAAO0B,iBACxBd,EAAKC,SAAS,SAAAJ,GAAK,MAAK,CACtBZ,KAAK,EACLN,KAAKkB,EAAMzB,MACXQ,KAAMiC,EACNhC,KAAK+B,EAAKG,KAAKlC,KACfC,OAAO8B,EAAKI,IAAIlC,OAChBC,QAAS6B,EAAKI,IAAIjC,QAClBC,SAAS4B,EAAKG,KAAK/B,cAKtBiC,MAAM,SAAAhC,GACLe,EAAKC,SAAS,SAAAiB,GAAS,MAAK,CAC1BjC,KAAK,EACLN,KAAMuC,EAAU9C,oFAOpB,OACEN,EAAAC,EAAAC,cAAA,OAAKuB,UAAU,OACbzB,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAACmD,EAAD,CAAM/C,MAAOgD,KAAKvB,MAAMzB,MAAOG,OAAQ6C,KAAKtB,kBAAmB5B,OAAQkD,KAAKjB,mBAC5ErC,EAAAC,EAAAC,cAACqD,EAAD,CAAQ3C,QAAS0C,KAAKvB,gBA3DZyB,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.a35e2737.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nconst Form  = props => {\r\n    return (\r\n        <form onSubmit={props.submit}>\r\n            <input type=\"text\" value={props.value} placeholder=\"Wpisz miasto\" onChange={props.change}/>\r\n            <button>Szukaj</button>\r\n        </form>\r\n      );\r\n}\r\n \r\nexport default Form","import React from 'react'\r\n\r\nconst  Result = props => {\r\n    const {city, date,temp, sunset, sunrise, pressure, err} = props.weather;\r\n\r\n    let content = null;\r\n\r\n    if(!err && city) {\r\n\r\n\r\n        const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\r\n        const sunsetTime = new Date(sunset * 1000).toLocaleTimeString();\r\n         \r\n\r\n        content = (\r\n        <div className=\"content\">\r\n        <h3>Wyniki wyszukiwania dla <em>{city}</em></h3>\r\n        <h4>Dla dnia i godziny: {date}</h4>\r\n        <h4>Aktualna temperatura: {Math.floor(temp)} &#176;C</h4>\r\n        <h4>Wschód słońca dzisiaj o{sunriseTime}</h4>\r\n        <h4>Zachód słońca dzisiaj o {sunsetTime }</h4>\r\n        <h4>Atualne ciśnienie {pressure} hPa</h4>\r\n        </div>\r\n        )\r\n    }\r\n\r\n    return ( \r\n        <div className=\"result\">\r\n          {err ? `Nie ma w bazie ${city}` : content }\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default  Result;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Form from './Form';\nimport Result from './Result';\n\nconst APIKey = '6b0adbdbb590757e7d337651368ecfc0';\n\nclass App extends Component {\n\n  state = {\n    value: '',\n    city:'',\n    date: '',\n    temp:'',\n    sunset:'',\n    sunrise: '',\n    pressure:'',\n    err:'',\n  }\n\n  handleInputChange = e =>{\n    this.setState({\n      value: e.target.value\n    })\n  }\n\n  handleCitySubmit = e => {\n    e.preventDefault()\n    const API = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&appid=${APIKey}&units=metric`;\n\n    fetch(API)\n    .then(response => {\n      if(response.ok) {\n        return response\n      }\n      throw Error(\"Nie udało się\")\n    }) \n    .then(response => response.json())\n    .then(data => {\n      const time = new Date().toLocaleString()\n      this.setState(state => ({\n        err: false,\n        city:state.value,\n        date: time,\n        temp:data.main.temp,\n        sunset:data.sys.sunset,\n        sunrise: data.sys.sunrise,\n        pressure:data.main.pressure,\n\n  \n      }))\n    })\n    .catch(err => {\n      this.setState(prevState => ({\n        err: true,\n        city: prevState.value,\n      \n      }))\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Pogodynka-app</h1>\n        <Form value={this.state.value} change={this.handleInputChange} submit={this.handleCitySubmit}/>\n        <Result weather={this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}